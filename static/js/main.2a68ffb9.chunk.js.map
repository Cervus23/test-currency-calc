{"version":3,"sources":["store/reducers.js","store/actions.js","components/Preloader/index.js","contaiers/FinalForm/index.js","contaiers/TextPage/index.js","components/Header/index.js","App.js","serviceWorker.js","index.js"],"names":["initialState","loading","inputValue","saleValue","answer","reducer","state","type","payload","Preloader","className","connect","dispatch","togglePreloader","setInputValue","setSaleValue","setAnswer","onSubmit","input","a","axios","result","sales","parseFloat","data","sale","toFixed","answerResult","validate","values","errors","test","render","handleSubmit","name","meta","htmlFor","min","placeholder","error","touched","withRouter","props","console","log","match","params","id","date","Header","to","Date","toDateString","path","exact","component","FinalForm","TextPage","store","createStore","reducers","App","Boolean","window","location","hostname","application","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.2a68ffb9.chunk.js","sourcesContent":["import { TOGGLE_PRELOADER, SET_INPUT_VALUE, SET_SALE_VALUE, SET_ANSWER } from './actions'\n\nconst initialState = {\n  loading: false,\n  inputValue: '',\n  saleValue: '',\n  answer: '',\n}\n\nconst reducer = (state = initialState, { type, payload }) => {\n  switch (type) {\n    case TOGGLE_PRELOADER:\n      return { ...state, loading: !state.loading };\n    case SET_INPUT_VALUE:\n      return { ...state, inputValue: payload };\n    case SET_SALE_VALUE:\n      return { ...state, saleValue: payload };\n    case SET_ANSWER:\n      return { ...state, answer: payload };\n    default:\n      return { ...state }\n  }\n}\n\nexport default reducer;","export const TOGGLE_PRELOADER = 'TOGGLE_PRELOADER';\nexport const SET_INPUT_VALUE = 'SET_INPUT';\nexport const SET_SALE_VALUE = 'SET_SALE_VALUE';\nexport const SET_ANSWER = 'SET_ANSWER';\n\nexport const togglePreloader = () => ({ type: TOGGLE_PRELOADER });\nexport const setInputValue = (payload) => ({ type: SET_INPUT_VALUE, payload });\nexport const setSaleValue = (payload) => ({ type: SET_SALE_VALUE, payload });\nexport const setAnswer = (payload) => ({ type: SET_ANSWER, payload });","import React from 'react'\nimport './style.css'\n\nconst Preloader = () => {\n  return (\n    <div className=\"preloader-background\">\n        <div className=\"rotation-red\">\n            <div className=\"red-circle\">\n              <div className=\"rotation-blue\">\n                  <div className=\"blue-circle\">\n                    <div className=\"rotation-yellow\">\n                        <div className=\"yellow-circle\">\n                        </div>\n                    </div>\n                  </div>\n              </div>\n            </div>\n        </div>\n    </div>\n  )\n}\n\nexport default Preloader","import React from 'react';\nimport { connect } from 'react-redux';\nimport { Form, Field } from 'react-final-form';\nimport Preloader from '../../components/Preloader';\nimport { togglePreloader, setInputValue, setSaleValue, setAnswer } from '../../store/actions';\nimport axios from 'axios';\nimport './style.css';\n\nconst FinalForm = ({\n  loading,\n  saleValue,\n  inputValue,\n  answer,\n  togglePreloader,\n  setAnswer,\n  setInputValue,\n  setSaleValue,\n}) => {\n  const onSubmit = ({ input }) => {\n    (async () => {\n      togglePreloader();\n\n      const result = await axios(\n        'https://api.privatbank.ua/p24api/pubinfo?json&exchange&coursid=3',\n      );\n      const sales = +parseFloat(result.data[2].sale).toFixed(2);\n\n      togglePreloader();\n\n      const answerResult = +parseFloat((input / sales).toFixed(2));\n\n      setAnswer(answerResult);\n      setInputValue(input);\n      setSaleValue(sales);\n    })();\n  };\n\n  return (\n    <Form\n      onSubmit={onSubmit}\n      validate={(values) => {\n        const errors = {};\n\n        if (!values.input) {\n          errors.input = 'Это поле обязательное';\n        } else if (!/\\d+/.test(values.input)) {\n          errors.input = 'Введите сумму в гривнах';\n        }\n\n        return errors;\n      }}\n      render={({ handleSubmit }) => (\n        <div>\n          {loading && <Preloader />}\n\n          <form onSubmit={handleSubmit} className='form'>\n            <div>\n              <Field name='input'>\n                {({ input, meta }) => {\n                  return (\n                    <div className='form-content'>\n                      <div className='field-content'>\n                        <label htmlFor='input' className='form-title'>\n                          Калькулятор\n                        </label>\n                        <input\n                          {...input}\n                          type='number'\n                          min='0'\n                          placeholder='Сумма, грн'\n                          className={`currency-input ${\n                            meta.error && meta.touched ? 'input-error' : null\n                          }`}\n                        />\n                      </div>\n                      <div className='error'>\n                        {meta.error && meta.touched && (\n                          <span>{meta.error}</span>\n                        )}\n                      </div>\n                      {answer && (\n                        <div className='answer'>\n                          <strong>{inputValue} грн</strong> по курсу\n                          <strong> {saleValue}$</strong> это{' '}\n                          <strong>{answer}$</strong>\n                        </div>\n                      )}\n                    </div>\n                  );\n                }}\n              </Field>\n            </div>\n            <button type='submit' className='btn-submit'>\n              Посчитать\n            </button>\n          </form>\n        </div>\n      )}\n    />\n  );\n};\n\nconst mapStateToProps = ({\n  loading,\n  inputValue,\n  saleValue,\n  answer\n}) => {\n  return {\n  loading,\n  inputValue,\n  saleValue,\n  answer\n}}\n\nconst mapDispatchToProps = (dispatch) => ({\n  togglePreloader: () => dispatch(togglePreloader()),\n  setInputValue: (inputValue) => {\n    dispatch(setInputValue(inputValue))\n  },\n  setSaleValue: (saleValue) => {\n    dispatch(setSaleValue(saleValue))\n  },\n  setAnswer: (answer) => {\n    dispatch(setAnswer(answer))\n  },\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(FinalForm)","import React from 'react'\nimport './style.css'\nimport { withRouter } from 'react-router-dom'\nconst TextPage = (props) => {\n  console.log('match', props.match)\n  return (\n    <div className=\"textPage\">\n      <h1 className=\"textPage-title\">Текстовая страница</h1>\n      <p className=\"textPage-text\">Это простая текстовая страница для \n        отображения параметров роута. Параметры: <br /> \n        - id:  {props.match.params.id}<br />\n        - date: {props.match.params.date}\n      </p>\n    </div>\n  )\n}\n\nexport default withRouter(TextPage)","import React from 'react'\nimport FinalForm from '../../contaiers/FinalForm'\nimport TextPage from '../../contaiers/TextPage'\nimport {Route, NavLink} from 'react-router-dom'\nimport './style.css'\n\nconst Header = () => {\n  return (\n    <div className=\"container\">\n      <nav className=\"navigation\">\n        <ul className=\"links\">\n          <li>\n            <NavLink to=\"/\"  className='link calc-link' > Калькулятор </NavLink>\n          </li>\n          <li>\n            <NavLink to={`/text/textpageid213/${new Date().toDateString()}`}  className='link text-link'> Текстовая </NavLink>\n          </li>\n        </ul>\n      </nav>\n\n      <Route path=\"/\" exact component={FinalForm} />\n      <Route path=\"/text/:id/:date\" component={TextPage} />\n    </div>\n    \n  )\n}\n\nexport default Header","import React from 'react';\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\nimport reducers from './store/reducers';\nimport Header from './components/Header'\nimport './App.css';\n\nconst store = createStore(reducers)\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <div className=\"App\">\n        <Header />\n      </div>\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport {BrowserRouter} from 'react-router-dom'\nimport * as serviceWorker from './serviceWorker';\n\nconst application = (\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>\n)\n\nReactDOM.render(\n  <React.StrictMode>\n    {application}\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}